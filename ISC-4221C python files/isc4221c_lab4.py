# -*- coding: utf-8 -*-
"""ISC4221C_lab4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1VYmoOWQ4Z_47s-ezVU_Pc3TmqAHxA3E5
"""

# ISC4221 - Lab 4
# by: Andres Candido
# Problem 1:

import networkx as nx

# opening the file in read mode
f = open("walther_edges.txt", "r")

# reading the file:
raw_data = f.read()
f.close()

# format raw data for conversion
data = raw_data.strip()
data = '(' + data + ')'

data = data.replace('   ', ',').replace('\n', '),(')
data = data.replace('  ', ',').replace(' ', '')
data = data.replace('),(', ') (')
data = data.split(' ')

# convert data into list of tuples
data_list = []
node_number = 0

for i in range(len(data)):
  item = []
  data[i] = data[i].replace('(', '').replace( ')', '')
  s = data[i].split(",")
  item = ([int(x) for x in s])

  if max(item) > node_number:
    node_number = max(item)

  item = tuple(item)
  data_list.append(item)

# Graph data, get nodes and edges
G = nx.Graph()

for i in range(node_number):
  G.add_node(i+1)

edges = G.add_edges_from(data_list)

print('Edge list:\n', G.edges)
print('# of nodes:', G.number_of_nodes())
print('# of edges:', G.number_of_edges())
print('Degree of each node (node, degree):\n', G.degree())

#nx.draw(G, with_labels=True)                # See graph here if wanted

# Problem 2:

import networkx as nx

# opening the file in read mode
f = open("paths_edges.txt", "r")

# reading the file:
raw_data = f.read()
f.close()

# format raw data for conversion
data = raw_data.strip()
data = '(' + data + ')'

data = data.replace('   ', ',').replace('\n', '),(')
data = data.replace('  ', ',').replace(' ', '')
data = data.replace('),(', ') (')
data = data.split(' ')

# convert data into list of tuples
data_list = []
node_number = 0

for i in range(len(data)):
  item = []
  data[i] = data[i].replace('(', '').replace( ')', '')
  s = data[i].split(",")
  item = ([int(x) for x in s])

  if max(item) > node_number:
    node_number = max(item)

  item = tuple(item)
  data_list.append(item)

# Graph data, get nodes and edges
G = nx.Graph()

for i in range(node_number):
  G.add_node(i+1)

edges = G.add_edges_from(data_list)

# Print edge list
print('Edge list:\n', G.edges)

# Print all indices for each node
incidence_matrix = nx.incidence_matrix(G)
print('Indices of nodes (as a matrix):\n', incidence_matrix.toarray())

# Find all paths from node "7" to node "8"
path = nx.all_simple_paths(G, source=7, target=8)
path = list(path)
#print(path)

print('\nIs there a path from node "7" to node "8"?\n')
if path == []:
  print('No path')
else:
  print('Path')

# Find all paths from node "7" to node "9"
path = nx.all_simple_paths(G, source=7, target=9)
path = list(path)
#print(path)

print('\nIs there a path from node "7" to node "9"?\n')
if path == []:
  print('No path')
else:
  print('Path')

#nx.draw(G, with_labels=True)                # See graph here if wanted

# Problem 3:

import networkx as nx
from networkx.classes.function import nodes
#------------------------------------------------Data in tsp_edges.txt-------------------------------------------------------
# opening the file in read mode
f = open("tsp_edges.txt", "r")

# reading the file:
raw_data = f.read()
f.close()

# format raw data for conversion
data = raw_data.strip()
data = '(' + data + ')'

data = data.replace(' ', ',').replace('\n', '),(')
data = data.replace('  ', ',').replace(' ', '')
data = data.replace('),(', ') (')
data = data.split(' ')

# convert data into list of tuples
data_list = []
node_number = 0

for i in range(len(data)):
  item = []
  data[i] = data[i].replace('(', '').replace( ')', '')
  s = data[i].split(",")
  item = ([int(x) for x in s])

  if max(item) > node_number:
    node_number = max(item)

  item = tuple(item)
  data_list.append(item)
#---------------------------------------------------------------------------------------------------------------------------

#------------------------------------------------Data in tsp_edge_weights.txt------------------------------------------------
# opening the file in read mode
f = open("tsp_edge_weights.txt", "r")

# reading the file:
raw_weights = f.read()
f.close()

# format weights for conversion
weights = []

raw_weights = raw_weights.strip()
raw_weights = '(' + raw_weights + ')'
raw_weights = raw_weights.replace('\n', ') (').split(' ')

for i in range(len(raw_weights)):
  item = []
  raw_weights[i] = raw_weights[i].replace('(', '').replace( ')', '')
  s = raw_weights[i].split(",")
  item = ([int(float(x)) for x in s])

  item = tuple(item)
  weights.append(item)
#---------------------------------------------------------------------------------------------------------------------------

# add weight list elements to data list elements (start, end, weight)
for i in range(len(data)):
  data_list[i] = data_list[i] + weights[i]

# Graph data, get nodes and edges
G = nx.Graph()

for i in range(node_number):
  G.add_node(i+1)

for start, end, length in data_list:
    G.add_edge(start, end, length=length)

nx.draw(G, with_labels=True)

# All possible paths (from 1 to 5)
start = 1; end = 5
all_paths = nx.all_simple_paths(G, start, end)
print("list of all the paths:")
print(list(all_paths),'\n')

# Shortest path and its length (Starting from node 1)
path = nx.approximation.traveling_salesman_problem(G, weight='length', nodes=G.nodes, cycle=True)
print("Shortest path:", path)
sp_length = 2+5+4+3+3+3
print("path length:", sp_length)

# Problem 4:

import numpy as np
import networkx as nx

# opening the file in read mode
f = open("kn57_distance_matrix.txt", "r")

# reading the file:
raw_dist = f.read()
f.close()

print(raw_dist)

k = 20