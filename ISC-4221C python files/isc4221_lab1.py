# -*- coding: utf-8 -*-
"""ISC4221_lab1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11wYOxkEWAD0chULJPxSqDdSSbJ-iBDgY
"""

# ISC4221 - Lab 1
# by: Andres Candido
# Part 1:

import numpy as np

data = np.random.randint(0,101,25)    #generate 25 random ints from 0 to 100 (101 is excluded by default)
print('Raw data: ',data)              #see raw data

def Selection_Sort(data):
  index_length = range(0, len(data)-1)

  for i in index_length:
    minimum = i

    for j in range(i+1, len(data)):    # selection sort occurs in this loop
        if data[j] < data[minimum]:
          minimum = j

    if minimum != i:
      data[minimum], data[i] = data[i], data[minimum]

  return data

print('Sorted data: ',Selection_Sort(data))

# Part 2:

import numpy as np

data2 = np.random.randint(0,101,25) #generate random ints from 0 to 100 (101 is excluded by default)
print('Raw data: ',data2)           #see raw data

def Bubble_Sort(data2):
  index_length = len(data2)-1
  sorted = False

  while not sorted:
    sorted = True # loop exit cond

    for i in range(0, index_length): #bubble sort occurs in this loop
      if data2[i] > data2[i+1]:
        sorted = False
        data2[i], data2[i+1] = data2[i+1], data2[i]

  return data2

print('Sorted data: ',Bubble_Sort(data2))

# Part 3

import math
import numpy as np

def distance(origin, destination): # define distance function

    lat1, lon1 = origin
    lat2, lon2 = destination
    radius = 6371  # km

    dlat = lat2-lat1
    dlon = lon2-lon1
    a = math.sin(dlat/2) * math.sin(dlat/2) + math.cos(lat1) \
        * math.cos(lat2) * math.sin(dlon/2) * math.sin(dlon/2)
    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1-a))
    d = (radius * c) * 0.621371                       #convert distance to miles

    return d

def Selection_Sort(data, storeID, city, origin):  # data represents the distance between cities
  index_length = range(0, len(data)-1)

  for i in index_length:
    minimum = i

    for j in range(i+1, len(data)):
        if data[j] < data[minimum]:
          minimum = j

    if minimum != i:                                    # sort distances, storeids, and cities together makes things easier
      data[minimum], data[i] = data[i], data[minimum]
      storeID[minimum], storeID[i] = storeID[i], storeID[minimum]
      city[minimum], city[i] = city[i], city[minimum]

    print('Store ID:',storeID[i], ' City: ',city[i], ' Distance from', origin, ': ',data[i], 'miles') #print here also makes things easier
  return 0 #returned value not needed

Current_City = input("Enter current city (first letter capitalized): ")

file1 = open('stores_location.dat', 'r')  # open file
Lines = file1.readlines()                 # read all lines
file1.close()                             # close file

StoreID_list,Location_list,Lat_list,Lon_list,Distance_list = ([] for i in range(5))

for line in Lines:                        # loop over each line
    storeID, location, latitude, tmp, longtitude, tmp = line.split()

    StoreID_list.append(storeID)
    Location_list.append(location)
    Lat_list.append(float(latitude))    #convert string to float
    Lon_list.append(float(longtitude))  #convert string to float

    #print (storeID,location,latitude,longtitude)

for i in range(0, len(Lat_list)):
  Lat_list[i] = math.radians(Lat_list[i])   # convert Lat and Lon into radians
  Lon_list[i] = math.radians(Lon_list[i])

  if Current_City == Location_list[i]:      # find origin city lat and lon
    Origin_index = i
    Origin_Coords = Lat_list[i] , Lon_list[i]

for i in range(0, len(Lat_list)):
  if i != Origin_index:               # i != Origin_index skips origin data
    Destination_Coords = Lat_list[i] , Lon_list[i]
    Distance_list.append(distance(Origin_Coords, Destination_Coords))
  else:
    Distance_list.append(0)     # 0 miles, origin = destination

print('Distance from',Current_City,'(in miles):')
get_list = Selection_Sort(Distance_list,StoreID_list,Location_list,Current_City)