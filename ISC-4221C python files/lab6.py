# -*- coding: utf-8 -*-
"""Lab6.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1yM-W-YF-utZszCLBUEktCkLasRDMX1ng
"""

# ISC4221 - Lab 6
# by: Andres Candido
# Problem 1:

import numpy as np
import itertools

N = 2 # unknows
M = 2 # slack vars
B_vector = [ 8, 15 ] # define vector B
A_matrix = [ [2,2,1,0],[5,3,0,1] ] # define matrix A
A_matrix = np.asarray(A_matrix)

seq = range(N+M)
com_seq = itertools.combinations(seq,M) # each combination determines which variables are NOT set to zero, so if c=(0,1) then variables at index position 0 and 1 aren't set to zero

# loop over all combinations
for c in com_seq:
  A_final = np.zeros([M,M])
  feasible = True
  for i in range(len(c)):
    A_final[:,i] = A_matrix[:,c[i]]
    try:
      solution = np.linalg.solve(A_final, B_vector)
      for x in solution:
        if x < 0:
          feasible = False
    except:
      print('')

  if feasible == True:
    print('For combination: ',c)
    print('The Final Matrix is:\n',A_final)
    print('Solution is feasible, ')
    print('Solution is:\n',solution,'\n')

# Problem 2:

import numpy as np
import itertools

N = 9 # unknows
M = 6 # slack vars
B_vector = [20, 30, 45, 30, 35, 30] # define vector B
c_vector = [8,15,50, 10,17,20, 30,26,15]
A_matrix = [ [1,1,1, 0,0,0, 0,0,0, 1,0,0, 0,0,0],
             [0,0,0, 1,1,1, 0,0,0, 0,1,0, 0,0,0],
             [0,0,0, 0,0,0, 1,1,1, 0,0,1, 0,0,0],
             [1,0,0, 1,0,0, 1,0,0, 0,0,0, -1,0,0],
             [0,1,0, 0,1,0, 0,1,0, 0,0,0, 0,-1,0],
             [0,0,1, 0,0,1, 0,0,1, 0,0,0, 0,0,-1] ] # define matrix A
A_matrix = np.asarray(A_matrix)

seq = range(N+M)
com_seq = itertools.combinations(seq,M) # each combination determines which variables are NOT set to zero, so if c=(0,1) then variables at index position 0 and 1 aren't set to zero

# loop over all combinations
for c in com_seq:
  A_final = np.zeros([M,M])
  feasible = True
  for i in range(len(c)):
    A_final[:,i] = A_matrix[:,c[i]]
    try:
      solution = np.linalg.solve(A_final, B_vector)
      for x in solution:
        if x < 0:
          feasible = False
    except:
      print('')

  if feasible == True:
    print('For combination: ',c)
    print('The Final Matrix is:\n',A_final)
    print('Solution is feasible, ')
    print('Solution is:\n',solution,'\n')

"""Make your recommendation on shipping based on
your solution:

My recommendation would be to choose the combination that gives feasible solution with the highest values in the solution vector.
"""